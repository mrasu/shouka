name: Release
on:
  workflow_run:
    workflows: ["Run Tests"]
    branches: [main]
    types: [completed]
jobs:
  on-failure:
    runs-on: ubuntu-latest
    if: ${{"{{"}} github.event.workflow_run.conclusion == 'failure' {{"}}"}}
    steps:
      - name: Stop release as tests failed
        run: exit 1
  on-success:
    runs-on: ubuntu-latest
    if: ${{"{{"}} github.event.workflow_run.conclusion == 'success' {{"}}"}}
    steps:
      - run: echo "Start release"
  build:
    runs-on: ubuntu-latest
    needs: on-success
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/login_aws
        with:
          region: "ap-northeast-1"
        {{- if .AwsRoleArn }}
          role_arn: "{{.AwsRoleArn}}"
        {{- else }}
          # **SK-CHANGE-REQUIRED**
          # Add ARN for IAM role to connect GitHub Actions by OpenId Connect
          # e.g. role_arn: "arn:aws:iam::xxxxxx:role/GitHubActionRole"
          role_arn: "{{.AwsRoleArn}}"
        {{- end }}
      - uses: ./.github/actions/login_ecr
        with:
          region: "ap-northeast-1"
        {{- if .AwsEcrRegistry }}
          server: "{{.AwsEcrRegistry}}"
        {{- else }}
          # **SK-CHANGE-REQUIRED**
          # Add Domain for ECR's Registry putting your image
          # e.g. server: "xxxx.dkr.ecr.us-east-1.amazonaws.com"
          server:
        {{- end }}
      - name: Build, tag, and push image to Amazon ECR
        env:
        {{- if .AwsEcrRegistry }}
          ECR_REGISTRY: "{{.AwsEcrRegistry}}"
        {{- else }}
          # **SK-CHANGE-REQUIRED**
          # Add Domain for ECR's Registry putting your image
          # e.g. ECR_REGISTRY: "xxxx.dkr.ecr.us-east-1.amazonaws.com"
          ECR_REGISTRY:
        {{- end }}
        {{- if .AwsEcrRepository }}
          ECR_REPOSITORY: "{{.AwsEcrRepository}}"
        {{- else }}
          # **SK-CHANGE-REQUIRED**
          # Add Repository for ECR putting your image
          # e.g. ECR_REPOSITORY: "sk-repository"
          ECR_REPOSITORY:
        {{- end }}
          IMAGE_TAG: ${{"{{"}} github.sha {{"}}"}}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/login_aws
        with:
          region: "ap-northeast-1"
        {{- if .AwsRoleArn }}
          role_arn: "{{.AwsRoleArn}}"
        {{- else }}
          # **SK-CHANGE-REQUIRED**
          # Add ARN for IAM role to connect GitHub Actions by OpenId Connect
          # e.g. role_arn: "arn:aws:iam::xxxxxx:role/GitHubActionRole"
          role_arn: "{{.AwsRoleArn}}"
        {{- end }}
      - uses: ./.github/actions/login_ecr
        with:
          region: "ap-northeast-1"
        {{- if .AwsEcrRegistry }}
          server: "{{.AwsEcrRegistry}}"
        {{- else }}
          # **SK-CHANGE-REQUIRED**
          # Add Domain for ECR's Registry putting your image
          # e.g. server: "xxxx.dkr.ecr.us-east-1.amazonaws.com"
          server:
        {{- end }}
      - name: Add "production" tag to pushed image
        env:
          ECR_REPOSITORY: "sk-repository"
          RELEASE_TAG: "{{.AwsEcrTag}}"
          IMAGE_TAG: ${{"{{"}} github.sha {{"}}"}}
        run: |
          MANIFEST=$(aws ecr batch-get-image --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE_TAG --query 'images[].imageManifest' --output text)
          aws ecr put-image --repository-name sk-repository --image-tag $RELEASE_TAG --image-manifest "$MANIFEST"
      - env:
          APPLICATION_NAME: "{{.AwsApplicationName}}"
          DEPLOYMENT_GROUP_NAME: "{{.AwsDeploymentGroupName}}"
        run: |
          aws deploy create-deployment --application-name $APPLICATION_NAME \
                                        --deployment-group-name $DEPLOYMENT_GROUP_NAME \
                                        --revision revisionType=AppSpecContent,appSpecContent={content="$(cat appspec.yml)"}
