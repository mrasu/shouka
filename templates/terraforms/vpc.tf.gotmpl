resource "aws_vpc" "vpc" {
  cidr_block           = "172.31.0.0/16"
  enable_dns_hostnames = true

  tags = {
    Name = "sk-VPC"
  }
}

resource "aws_default_route_table" "default_route_table" {
  default_route_table_id = aws_vpc.vpc.default_route_table_id
  route = [
    {
      cidr_block                 = "0.0.0.0/0"
      destination_prefix_list_id = ""
      egress_only_gateway_id     = ""
      gateway_id                 = aws_internet_gateway.internet_gateway.id
      instance_id                = ""
      ipv6_cidr_block            = ""
      nat_gateway_id             = ""
      network_interface_id       = ""
      transit_gateway_id         = ""
      vpc_endpoint_id            = ""
      vpc_peering_connection_id  = ""
    },
  ]

  propagating_vgws = []

  tags = {
    Name = "sk-DefaultRouteTable"
  }
}

resource "aws_internet_gateway" "internet_gateway" {
  vpc_id = aws_vpc.vpc.id

  tags = {
    Name = "sk-InternetGateway"
  }
}

resource "aws_vpc_dhcp_options" "vpc_dhcp_options" {
  domain_name = "${var.aws_region}.compute.internal"
  domain_name_servers = [
    "AmazonProvidedDNS",
  ]

  tags = {
    Name = "sk-DHCPOptions"
  }
}

resource "aws_vpc_dhcp_options_association" "vpc_dhcp_options_association" {
  dhcp_options_id = aws_vpc_dhcp_options.vpc_dhcp_options.id
  vpc_id          = aws_vpc.vpc.id
}

resource "aws_vpc_endpoint" "vpc_endpoint_ecr_api" {
  policy = jsonencode(
    {
      Statement = [
        {
          Action    = "*"
          Effect    = "Allow"
          Principal = "*"
          Resource  = "*"
        },
      ]
    }
  )
  private_dns_enabled = true
  security_group_ids = [
  {{- if .SecurityGroup.PublicId }}
    var.security_group_public_id,
  {{- else}}
    aws_security_group.public.id,
  {{- end}}
  ]
  service_name = "com.amazonaws.${var.aws_region}.ecr.api"
  subnet_ids = [
  {{- if .Subnet.Subnet1Id }}
    var.subnet_1_id,
  {{- else}}
    aws_subnet.az_1.id,
  {{- end}}
  {{- if .Subnet.Subnet2Id }}
    var.subnet_2_id,
  {{- else}}
    aws_subnet.az_2.id,
  {{- end}}
  ]
  vpc_endpoint_type = "Interface"
  vpc_id            = aws_vpc.vpc.id

  tags = {
    Name = "sk-EcrApiEndpoint"
  }
}

resource "aws_vpc_endpoint" "vpc_endpoint_ecr_dkr" {
  policy = jsonencode(
    {
      Statement = [
        {
          Action    = "*"
          Effect    = "Allow"
          Principal = "*"
          Resource  = "*"
        },
      ]
    }
  )
  private_dns_enabled = true
  security_group_ids = [
  {{- if .SecurityGroup.PublicId }}
    var.security_group_public_id,
  {{- else}}
    aws_security_group.public.id,
  {{- end}}
  ]
  service_name = "com.amazonaws.${var.aws_region}.ecr.dkr"
  subnet_ids = [
  {{- if .Subnet.Subnet1Id }}
    var.subnet_1_id,
  {{- else}}
    aws_subnet.az_1.id,
  {{- end}}
  {{- if .Subnet.Subnet2Id }}
    var.subnet_2_id,
  {{- else}}
    aws_subnet.az_2.id,
  {{- end}}
  ]
  vpc_endpoint_type = "Interface"
  vpc_id            = aws_vpc.vpc.id

  tags = {
    Name = "sk-EcrDkrEndpoint"
  }
}

resource "aws_vpc_endpoint" "vpc_endpoint_logs" {
  policy = jsonencode(
    {
      Statement = [
        {
          Action    = "*"
          Effect    = "Allow"
          Principal = "*"
          Resource  = "*"
        },
      ]
    }
  )
  private_dns_enabled = true
  security_group_ids = [
  {{- if .SecurityGroup.PublicId }}
    var.security_group_public_id,
  {{- else}}
    aws_security_group.public.id,
  {{- end}}
  ]
  service_name = "com.amazonaws.${var.aws_region}.logs"
  subnet_ids = [
  {{- if .Subnet.Subnet1Id }}
    var.subnet_1_id,
  {{- else}}
    aws_subnet.az_1.id,
  {{- end}}
  {{- if .Subnet.Subnet2Id }}
    var.subnet_2_id,
  {{- else}}
    aws_subnet.az_2.id,
  {{- end}}
  ]
  vpc_endpoint_type = "Interface"
  vpc_id            = aws_vpc.vpc.id

  tags = {
    Name = "sk-LogsEndpoint"
  }
}

resource "aws_vpc_endpoint" "vpc_endpoint_s3" {
  policy = jsonencode(
    {
      Statement = [
        {
          Action    = "s3:GetObject"
          Effect    = "Allow"
          Principal = "*"
          Resource  = "arn:aws:s3:::prod-${var.aws_region}-starport-layer-bucket/*"
          Sid       = "Access-to-specific-bucket-only"
        },
      ]
      Version = "2008-10-17"
    }
  )
  route_table_ids = [
    aws_vpc.vpc.default_route_table_id
  ]
  service_name = "com.amazonaws.${var.aws_region}.s3"
  vpc_id       = aws_vpc.vpc.id

  tags = {
    Name = "sk-S3Endpoint"
  }
}

# Made by Shouka
