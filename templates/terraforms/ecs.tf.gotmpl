resource "aws_ecs_cluster" "cluster" {
  capacity_providers = [
    "FARGATE",
    "FARGATE_SPOT",
  ]
  name = "{{.SkPrefix}}-{{.Ecs.DefaultClusterName}}"

  setting {
    name  = "containerInsights"
    value = "disabled"
  }

  tags = {}
}

resource "aws_ecs_task_definition" "run_server" {
  container_definitions = jsonencode(
    [
      {
        cpu         = 0
        environment = []
        essential   = true
      {{- if and .Ecr.RepositoryUrl }}
        image       = var.ecr_image
      {{- else }}
        image       = "${aws_ecr_repository.ecr_repository.repository_url}:{{.Ecr.Tag}}"
      {{- end }}
        logConfiguration = {
          logDriver = "awslogs"
          options = {
          {{- if .CloudWatch.GroupName }}
            awslogs-group = var.cloud_watch_log_group_name
          {{- else}}
            awslogs-group = aws_cloudwatch_log_group.ecs_logs.name
          {{- end}}

            awslogs-region        = var.aws_region
            awslogs-stream-prefix = "ecs"
          }
        }
        mountPoints = []
        name        = "{{.SkPrefix}}-container"
        portMappings = [
          {
            containerPort = 80
            hostPort      = 80
            protocol      = "tcp"
          },
        ]
        volumesFrom = []
      },
    ]
  )
  cpu                = "256"
{{- if .Iam.EcsTaskExecutionArn }}
  execution_role_arn = var.iam_role_ecs_task_execution_arn
{{- else}}
  execution_role_arn = aws_iam_role.ecs_task_execution.arn
{{- end}}
  family             = "{{.SkPrefix}}-{{.Ecs.DefaultTaskFamilyName}}"
  memory             = "512"
  network_mode       = "awsvpc"
  requires_compatibilities = [
    "FARGATE",
  ]
{{- if .Iam.EcsTaskExecutionArn }}
  task_role_arn = var.iam_role_ecs_task_execution_arn
{{- else}}
  task_role_arn = aws_iam_role.ecs_task_execution.arn
{{- end}}

  tags = {}
}

resource "aws_ecs_task_definition" "run_migration" {
  container_definitions = jsonencode(
    [
      {
        command     = ["./server", "migrate"]
        cpu         = 0
        environment = []
        essential   = true
      {{- if and .Ecr.RepositoryUrl }}
        image       = var.ecr_image
      {{- else }}
        image       = "${aws_ecr_repository.ecr_repository.repository_url}:{{.Ecr.MigrationTag}}"
      {{- end }}
        logConfiguration = {
          logDriver = "awslogs"
          options = {
          {{- if .CloudWatch.GroupName }}
            awslogs-group = var.cloud_watch_log_group_name
          {{- else}}
            awslogs-group = aws_cloudwatch_log_group.ecs_logs.name
          {{- end}}

            awslogs-region        = var.aws_region
            awslogs-stream-prefix = "ecs"
          }
        }
        mountPoints = []
        name        = "{{.SkPrefix}}-container"
        portMappings = [
          {
            containerPort = 80
            hostPort      = 80
            protocol      = "tcp"
          },
        ]
        volumesFrom = []
      },
    ]
  )
  cpu                = "256"
{{- if .Iam.EcsTaskExecutionArn }}
  execution_role_arn = var.iam_role_ecs_task_execution_arn
{{- else}}
  execution_role_arn = aws_iam_role.ecs_task_execution.arn
{{- end}}
  family             = "{{.SkPrefix}}-{{.Ecs.DefaultMigrationTaskFamilyName}}"
  memory             = "512"
  network_mode       = "awsvpc"
  requires_compatibilities = [
    "FARGATE",
  ]
{{- if .Iam.EcsTaskExecutionArn }}
  task_role_arn = var.iam_role_ecs_task_execution_arn
{{- else}}
  task_role_arn = aws_iam_role.ecs_task_execution.arn
{{- end}}

  tags = {}
}

resource "aws_ecs_service" "http_servers" {
  cluster                            = aws_ecs_cluster.cluster.arn
  deployment_maximum_percent         = 200
  deployment_minimum_healthy_percent = 100
  desired_count                      = 2
  enable_ecs_managed_tags            = true
  enable_execute_command             = false
  health_check_grace_period_seconds  = 0
  launch_type                        = "FARGATE"
  name                               = "{{.SkPrefix}}-{{.Ecs.DefaultServiceName}}"
  platform_version                   = "1.4.0"
  task_definition                    = aws_ecs_task_definition.run_server.arn

  deployment_controller {
    type = "CODE_DEPLOY"
  }

  load_balancer {
    container_name   = "{{.SkPrefix}}-container"
    container_port   = 80
    target_group_arn = aws_lb_target_group.blue.arn
  }

  network_configuration {
    security_groups = [
    {{- if .SecurityGroup.PublicId }}
      var.security_group_public_id,
    {{- else}}
      aws_security_group.public.id,
    {{- end}}
    ]
    subnets = [
    {{- if .Subnet.Subnet1Id }}
      var.subnet_1_id,
    {{- else}}
      aws_subnet.az_1.id,
    {{- end}}
    {{- if .Subnet.Subnet2Id }}
      var.subnet_2_id,
    {{- else}}
      aws_subnet.az_2.id,
    {{- end}}
    ]
  }

  tags = {}
}

# Made by Shouka
